"use client"

import { useEffect, useState } from 'react'
import { useAuth } from '@/components/auth'
import api from '@/lib/api'
import { NotificationDropdown } from '@/components/notifications/notification-dropdown'
import { Button } from '@/components/ui/button'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export default function NotificationsTest() {
  const { user } = useAuth()
  const [notifications, setNotifications] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchNotifications = async () => {
      try {
        setLoading(true)
        setError(null)
        console.log("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é...")
        const response = await api.get('/users/notifications/')
        console.log("–û—Ç–≤–µ—Ç API:", response.data)
        setNotifications(response.data)
      } catch (error: any) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error)
        setError(error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
      } finally {
        setLoading(false)
      }
    }

    if (user) {
      fetchNotifications()
    }
  }, [user])

  const handleRefresh = () => {
    if (!user) {
      setError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
      return
    }
    
    const fetchNotifications = async () => {
      try {
        setLoading(true)
        setError(null)
        console.log("–û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        const response = await api.get('/users/notifications/')
        console.log("–û—Ç–≤–µ—Ç API:", response.data)
        setNotifications(response.data)
      } catch (error: any) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error)
        setError(error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
      } finally {
        setLoading(false)
      }
    }
    
    fetchNotifications()
  }

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h1>
      
      <div className="mb-4">
        <h2 className="text-xl font-semibold mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</h2>
        {user ? (
          <pre className="bg-gray-100 p-4 rounded">
            {JSON.stringify(user, null, 2)}
          </pre>
        ) : (
          <p className="text-red-500">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</p>
        )}
      </div>
      
      <div className="mb-4">
        <h2 className="text-xl font-semibold mb-2">
          –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
          <Button onClick={handleRefresh} className="ml-4" variant="outline" size="sm">
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
        </h2>
        <div className="border p-4 flex items-center gap-4">
          <NotificationDropdown />
          <span className="text-gray-500">üëà –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
        </div>
      </div>
      
      <div>
        <h2 className="text-xl font-semibold mb-2">–ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</h2>
        {loading ? (
          <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        ) : error ? (
          <p className="text-red-500">{error}</p>
        ) : notifications.length === 0 ? (
          <p className="bg-yellow-100 p-4 rounded">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ï—Å–ª–∏ –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ –≤–∏–¥–µ—Ç—å –∑–¥–µ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–µ—Ä–≤–µ—Ä.</p>
        ) : (
          <pre className="bg-gray-100 p-4 rounded">
            {JSON.stringify(notifications, null, 2)}
          </pre>
        )}
      </div>
    </div>
  )
} 